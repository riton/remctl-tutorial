#!/usr/bin/env python

import os
import sys
import json
import uuid
import argparse

class Krb5PrincipalManager(object):
  pass

class Cli(object):

  def __init__(self):
    self.options = None
    self.request_id = None
    self.kprovider = Krb5PrincipalManager()

  def _parse_args(self):
    parser = argparse.ArgumentParser(description='Kerberos service principals manager')
    subparsers = parser.add_subparsers()

    eparser = subparsers.add_parser('does-exist', help='Check if a given Kerberos service principal exists')
    eparser.add_argument('principal', help='Kerberos service principal to check for existence')
    eparser.set_defaults(func=self._does_exist)


    cparser = subparsers.add_parser('create', help='Create a Kerberos service principal')
    cparser.add_argument('principal', help='Kerberos service principal to create')
    cparser.set_defaults(func=self._create)

    return parser.parse_args()

  def _does_exist(self):
    return {
      'success': True,
      'result': {
        'exists': True
      }
    }

  def _create(self):
    print "CREATE: %s" % self.options.principal
    return {
      'success': True
    }

  @staticmethod
  def _gen_request_id():
    return str(uuid.uuid4())

  def run(self):
    self.options = self._parse_args()
    self.request_id = self._gen_request_id()
  
    result = {}
    try:
      result = self.options.func()

    except Exception as e:
      result = {
        'success': False,
        'error': 'Unexpected error: %s %s' % (type(e), str(e))
      }

    result['request-id'] = self.request_id

    print json.dumps(result)
    sys.exit(0 if result['success'] else 1)


def main():
  sys.exit(Cli().run())

if __name__ == '__main__':
  main()
